// Generated by CoffeeScript 1.10.0
(function() {
  var IIIFImageExtractorJP2Kakadu, async, child_process, fs, tempfile,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  tempfile = require('tempfile');

  child_process = require('child_process');

  async = require('async');

  fs = require('fs');

  IIIFImageExtractorJP2Kakadu = (function() {
    function IIIFImageExtractorJP2Kakadu(options, final_callback) {
      this.options = options;
      this.final_callback = final_callback;
      this.resize_cmd = bind(this.resize_cmd, this);
      this.extract = bind(this.extract, this);
      this.path = this.options.path;
      this.info = this.options.info;
      this.params = this.options.params;
      this.temp_bmp = tempfile('.bmp');
      this.final_image = tempfile("." + this.params.format);
    }

    IIIFImageExtractorJP2Kakadu.prototype.extract = function() {
      var kdu_expand_cmd, resize_cmd;
      kdu_expand_cmd = this.kdu_expand_cmd();
      console.log(kdu_expand_cmd);
      resize_cmd = this.resize_cmd();
      return async.series([
        function(seriescb) {
          return child_process.exec(kdu_expand_cmd, (function(_this) {
            return function(err, stdout, stderr) {
              return seriescb();
            };
          })(this));
        }, function(seriescb) {
          return child_process.exec(resize_cmd, (function(_this) {
            return function(err, stdout, stderr) {
              return seriescb();
            };
          })(this));
        }, (function(_this) {
          return function(seriescb) {
            _this.final_callback(_this.final_image);
            return seriescb();
          };
        })(this), (function(_this) {
          return function(seriescb) {
            return fs.unlink(_this.temp_bmp);
          };
        })(this)
      ]);
    };

    IIIFImageExtractorJP2Kakadu.prototype.kdu_expand_cmd = function() {
      var height, height_pct, left, left_pct, reduction, ref, ref1, top, top_pct, width, width_pct;
      if (this.params.region === 'full') {
        ref = [0, 0, this.info.height, this.info.width], top = ref[0], left = ref[1], height = ref[2], width = ref[3];
      } else {
        ref1 = [this.params.region.y, this.params.region.x, this.params.region.h, this.params.region.w], top = ref1[0], left = ref1[1], height = ref1[2], width = ref1[3];
      }
      top_pct = top / this.info.height;
      left_pct = left / this.info.width;
      height_pct = height / this.info.height;
      width_pct = width / this.info.width;
      reduction = this.pick_reduction();
      return "kdu_expand -i " + this.path + " -o " + this.temp_bmp + " -region '{" + top_pct + "," + left_pct + "},{" + height_pct + "," + width_pct + "}' -reduce " + reduction;
    };

    IIIFImageExtractorJP2Kakadu.prototype.resize_cmd = function() {
      return "convert " + this.temp_bmp + " -resize " + this.params.size.w + " " + this.final_image;
    };

    IIIFImageExtractorJP2Kakadu.prototype.pick_reduction = function() {
      var reduction_factor, region_width, scale_factors;
      region_width = this.params.region === 'full' ? this.info.width : this.params.region.w;
      console.log([region_width, this.params.size.w]);
      reduction_factor = region_width / this.params.size.w;
      console.log("reduction_factor " + reduction_factor);
      scale_factors = this.info.tiles[0].scaleFactors.reverse();
      switch (false) {
        case !(reduction_factor >= scale_factors[0]):
          return 6;
        case !(reduction_factor >= scale_factors[1]):
          return 5;
        case !(reduction_factor >= scale_factors[2]):
          return 4;
        case !(reduction_factor >= scale_factors[3]):
          return 3;
        case !(reduction_factor >= scale_factors[4]):
          return 2;
        case !(reduction_factor >= scale_factors[5]):
          return 1;
        default:
          return 0;
      }
    };

    return IIIFImageExtractorJP2Kakadu;

  })();

  exports.IIIFImageExtractorJP2Kakadu = IIIFImageExtractorJP2Kakadu;

}).call(this);
