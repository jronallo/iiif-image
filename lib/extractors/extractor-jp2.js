// Generated by CoffeeScript 1.10.0
(function() {
  var ConvertManipulator, ExtractorJp2, SharpManipulator, _, async, child_process, fs, tempfile,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  tempfile = require('tempfile');

  async = require('async');

  child_process = require('child_process');

  fs = require('fs');

  ConvertManipulator = require('../manipulators/convert-manipulator').ConvertManipulator;

  SharpManipulator = require('../manipulators/sharp-manipulator').SharpManipulator;

  ExtractorJp2 = (function() {
    function ExtractorJp2(options, final_callback) {
      this.options = options;
      this.final_callback = final_callback;
      this.extract = bind(this.extract, this);
      this.path = this.options.path;
      this.info = this.options.info;
      this.params = this.options.params;
      this.final_image = tempfile("." + this.params.format);
      this.set_temp_out_image();
      this.manipulator = new SharpManipulator(this.temp_out_image, this.params, this.final_image);
    }

    ExtractorJp2.prototype.extract = function() {
      var cmd;
      cmd = this.extract_cmd();
      return async.waterfall([
        function(seriescb) {
          return child_process.exec(cmd, (function(_this) {
            return function(err, stdout, stderr) {
              return seriescb();
            };
          })(this));
        }, (function(_this) {
          return function(seriescb) {
            return _this.manipulator.manipulate(seriescb);
          };
        })(this), (function(_this) {
          return function(image_buffer, info, seriescb) {
            seriescb();
            return _this.final_callback(image_buffer);
          };
        })(this), (function(_this) {
          return function(seriescb) {
            return fs.unlink(_this.temp_out_image);
          };
        })(this)
      ]);
    };


    /*
    TODO: optimize pick_reduction
    This could be improved to be more exact in the reduction to pick. In some cases
    where the image requested is the same as the size of on of the quality layers
    it will pick a larger layer than it needs to.
     */

    ExtractorJp2.prototype.pick_reduction = function() {
      var current_level, i, index, len, reduction_factor, reduction_scale_matches, region_height, region_width, same_or_bigger, scale_factor, scale_factor_reduction, scale_factors;
      if (this.params.size.w != null) {
        region_width = this.params.region === 'full' ? this.info.width : this.params.region.w;
        reduction_factor = region_width / this.params.size.w;
      } else {
        region_height = this.params.region === 'full' ? this.info.height : this.params.region.h;
        reduction_factor = region_height / this.params.size.h;
      }
      scale_factors = this.info.tiles[0].scaleFactors.reverse();
      reduction_scale_matches = [];
      current_level = this.info.levels;
      for (index = i = 0, len = scale_factors.length; i < len; index = ++i) {
        scale_factor = scale_factors[index];
        scale_factor_reduction = {
          scale_factor: scale_factor,
          reduction: current_level
        };
        reduction_scale_matches.push(scale_factor_reduction);
        current_level -= 1;
      }
      same_or_bigger = _.filter(reduction_scale_matches, function(rsm) {
        return reduction_factor >= rsm.scale_factor;
      });
      return same_or_bigger[0].reduction;
    };

    return ExtractorJp2;

  })();

  exports.ExtractorJp2 = ExtractorJp2;

}).call(this);
