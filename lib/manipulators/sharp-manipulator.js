// Generated by CoffeeScript 1.10.0
(function() {
  var SharpManipulator, sharp,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sharp = require('sharp');

  SharpManipulator = (function() {
    function SharpManipulator(temp_bmp, params, info1, final_image) {
      this.temp_bmp = temp_bmp;
      this.params = params;
      this.info = info1;
      this.final_image = final_image;
      this.manipulate = bind(this.manipulate, this);
    }

    SharpManipulator.prototype.manipulate = function(callback) {
      var calculated_width, degrees, image, percent_factor, region_width;
      image = sharp(this.temp_bmp);
      if (this.params.size !== 'full') {
        if (this.params.size.w != null) {
          image.resize(this.params.size.w);
        } else if (this.params.size.pct != null) {
          region_width = this.params.region === 'full' ? this.info.width : this.params.region.w;
          percent_factor = this.params.size.pct / 100;
          calculated_width = Math.round(region_width * percent_factor);
          this.params.size.w = calculated_width;
          image.resize(calculated_width);
        } else {
          image.resize(null, this.params.size.h);
        }
      }
      degrees = this.params.rotation.degrees;
      if (degrees !== 0 && (degrees === 90 || degrees === 180 || degrees === 270)) {
        image.rotate(degrees);
      }
      if (this.params.format === 'jpg') {
        image.toFormat('jpeg');
      } else {
        image.toFormat(this.params.format);
      }
      return image.toBuffer((function(_this) {
        return function(err, buffer, info) {
          return callback(null, buffer, _this.params, info);
        };
      })(this));
    };

    return SharpManipulator;

  })();

  exports.SharpManipulator = SharpManipulator;

}).call(this);
