// Generated by CoffeeScript 1.10.0
(function() {
  var InformerJp2, InformerJp2Kakadu, async, child_process, fs, parsexml, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  parsexml = require('xml2js').parseString;

  child_process = require('child_process');

  util = require('util');

  fs = require('fs');

  async = require('async');

  InformerJp2 = require('./informer-jp2').InformerJp2;

  InformerJp2Kakadu = (function(superClass) {
    extend(InformerJp2Kakadu, superClass);

    function InformerJp2Kakadu(path, final_callback) {
      this.path = path;
      this.final_callback = final_callback;
      this.extract_levels = bind(this.extract_levels, this);
      this.inform = bind(this.inform, this);
      this.info = {};
      this.kinfo = null;
    }

    InformerJp2Kakadu.prototype.inform = function() {
      return async.series([
        (function(_this) {
          return function(seriescb) {
            return _this.extract_kinfo(seriescb);
          };
        })(this), (function(_this) {
          return function(seriescb) {
            return _this.extract_levels(seriescb);
          };
        })(this), (function(_this) {
          return function(seriescb) {
            return _this.calculate_sizes_for_levels(seriescb);
          };
        })(this), (function(_this) {
          return function(seriescb) {
            var i, level, ref, scale_factors;
            _this.info.tiles = [];
            _this.info.tiles.push({
              width: _this.kinfo.tile_width
            });
            if (_this.kinfo.tile_width !== _this.kinfo.tile_height) {
              _this.info.tiles[0]['height'] = _this.info.tile_height;
            }
            scale_factors = [];
            for (level = i = 0, ref = _this.info.levels; 0 <= ref ? i <= ref : i >= ref; level = 0 <= ref ? ++i : --i) {
              scale_factors.push(Math.pow(2, level));
            }
            _this.info.tiles[0]['scaleFactors'] = scale_factors;
            return seriescb();
          };
        })(this), (function(_this) {
          return function(seriescb) {
            return _this.final_callback(_this.info);
          };
        })(this)
      ]);
    };

    InformerJp2Kakadu.prototype.extract_kinfo = function(cb) {
      var kdu_info_cmd;
      kdu_info_cmd = "kdu_jp2info -siz -boxes 1 -com -i " + this.path;
      return child_process.exec(kdu_info_cmd, (function(_this) {
        return function(err, stdout, stderr) {
          return parsexml(stdout, function(err, kinfo) {
            var codestream, jpc, matches, ref, siz, tile_height, tile_width;
            _this.kinfo = kinfo;
            jpc = _this.kinfo.JP2_family_file.jp2c[0];
            codestream = jpc.codestream[0];
            _this.info.width = parseInt(codestream.width[0]);
            _this.info.height = parseInt(codestream.height[0]);
            siz = codestream.SIZ[0];
            matches = siz.match(/Stiles=\{(.*)\}/);
            ref = matches[1].split(','), tile_width = ref[0], tile_height = ref[1];
            _this.kinfo.tile_width = parseInt(tile_width);
            _this.kinfo.tile_height = parseInt(tile_height);
            return cb();
          });
        };
      })(this));
    };

    InformerJp2Kakadu.prototype.extract_levels = function(cb) {
      return fs.open(this.path, 'r', (function(_this) {
        return function(status, fd) {
          var name, num, read_levels, read_to_name, wind;
          num = 0;
          name = 'ff52';
          wind = [null, null];
          read_to_name = function(callback) {
            return async.whilst(function() {
              return wind.join('') !== name;
            }, function(done) {
              var buffer;
              buffer = new Buffer(1);
              return fs.read(fd, buffer, 0, 1, num, function(err, bytesRead, buffer) {
                var hex;
                wind.shift();
                hex = buffer.toString('hex');
                wind.push(hex);
                num += 1;
                return done(null, wind);
              });
            }, function(err, results) {
              return callback();
            });
          };
          read_levels = function(callback) {
            var levels_buffer;
            levels_buffer = new Buffer(1);
            return fs.read(fd, levels_buffer, 0, 1, num + 7, function(err, bytesRead, buffer) {
              var levels;
              levels = levels_buffer.readInt8();
              _this.info.levels = levels;
              return callback();
            });
          };
          return async.series([
            function(callback) {
              return read_to_name(callback);
            }, function(callback) {
              return read_levels(callback);
            }
          ], function(err, results) {
            fs.close(fd);
            return cb();
          });
        };
      })(this));
    };

    return InformerJp2Kakadu;

  })(InformerJp2);

  exports.InformerJp2Kakadu = InformerJp2Kakadu;

}).call(this);
