// Generated by CoffeeScript 1.10.0
(function() {
  var InformerJP2Openjpeg, child_process,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  child_process = require('child_process');

  InformerJP2Openjpeg = (function() {
    function InformerJP2Openjpeg(path, final_callback) {
      this.path = path;
      this.final_callback = final_callback;
      this.calculate_sizes_for_levels = bind(this.calculate_sizes_for_levels, this);
      this.inform = bind(this.inform, this);
      this.info = null;
    }

    InformerJP2Openjpeg.prototype.inform = function() {
      var cmd;
      cmd = "opj_dump -i " + this.path;
      return child_process.exec(cmd, (function(_this) {
        return function(err, out, stderr) {
          var height, height_match, i, level, levels, levels_match, ref, scale_factors, sizes, tiles_height, tiles_match_height, tiles_match_width, tiles_width, width, width_match;
          width_match = out.match(/x1=(.*),/);
          width = parseInt(width_match[1]);
          height_match = out.match(/, y1=(.*)/);
          height = parseInt(height_match[1]);
          levels_match = out.match(/numresolutions=(.*)/);
          levels = parseInt(levels_match[1]) - 1;
          tiles_match_width = out.match(/tdx=(.*),/);
          tiles_width = parseInt(tiles_match_width[1]);
          tiles_match_height = out.match(/tdy=(.*)/);
          tiles_height = parseInt(tiles_match_height[1]);
          _this.info = {
            width: width,
            height: height,
            levels: levels,
            tiles: [
              {
                width: tiles_width,
                height: tiles_height
              }
            ]
          };
          sizes = _this.calculate_sizes_for_levels();
          scale_factors = [];
          for (level = i = 0, ref = _this.info.levels; 0 <= ref ? i <= ref : i >= ref; level = 0 <= ref ? ++i : --i) {
            scale_factors.push(Math.pow(2, level));
          }
          _this.info.tiles[0]['scaleFactors'] = scale_factors;
          return _this.final_callback(_this.info);
        };
      })(this));
    };

    InformerJP2Openjpeg.prototype.calculate_sizes_for_levels = function() {
      var height, i, ref, size, sizes, width;
      sizes = [];
      width = this.info.width;
      height = this.info.height;
      for (i = 0, ref = this.info.levels; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
        size = {
          width: width,
          height: height
        };
        sizes.push(size);
        width = Math.ceil(width / 2.0);
        height = Math.ceil(height / 2.0);
      }
      return this.info.sizes = sizes.reverse();
    };

    return InformerJP2Openjpeg;

  })();

  exports.InformerJP2Openjpeg = InformerJP2Openjpeg;

}).call(this);
